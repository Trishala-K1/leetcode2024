# string to integer atoi
class Solution:
    def myAtoi(self, str: str) -> int:
        value, state, pos, sign = 0, 0, 0, 1

        if len(str) == 0:
            return 0

        while pos < len(str):
            current_char = str[pos]
            if state == 0:
                if current_char == " ":
                    state = 0
                elif current_char == "+" or current_char == "-":
                    state = 1
                    sign = 1 if current_char == "+" else -1
                elif current_char.isdigit():
                    state = 2
                    value = value * 10 + int(current_char)
                else:
                    return 0
            elif state == 1:
                if current_char.isdigit():
                    state = 2
                    value = value * 10 + int(current_char)
                else:
                    return 0
            elif state == 2:
                if current_char.isdigit():
                    state = 2
                    value = value * 10 + int(current_char)
                else:
                    break
            else:
                return 0
            pos += 1

        value = sign * value
        value = min(value, 2 ** 31 - 1)
        value = max(-(2 ** 31), value)
# Longest repeating character replacement 
# Define a class named Solution
class Solution:
    # Define a method named characterReplacement that takes a string 's' and an integer 'k' as parameters
    def characterReplacement(self, s: str, k: int) -> int:
        # Initialize a dictionary 'alphabets' to store the count of each character in the current window
        alphabets = {}
        
        # Initialize variables for the answer, left pointer, right pointer, and the maximum length
        ans = 0
        left = 0
        right = 0
        max_len = 0

        # Iterate through the string using the right pointer
        for right in range(len(s)):
            # Update the count of the current character in the 'alphabets' dictionary
            alphabets[s[right]] = 1 + alphabets.get(s[right], 0)
            
            # Update 'max_len' with the maximum count of any character in the current window
            max_len = max(max_len, alphabets[s[right]])

            # Check if the current window size minus 'max_len' is greater than 'k'
            if (right - left + 1) - max_len > k:
                # If so, move the left pointer and decrease the count of the character at the left
                alphabets[s[left]] -= 1
                left += 1
            else:
                # If not, update the answer with the maximum window size
                ans = max(ans, (right - left + 1))

        # Return the final answer
        return ans

        return value
        # Palindrome Pairs 
        class Solution:
    def palindromePairs(self, words: List[str]) -> List[List[int]]:
        backward, res = {}, []
        for i, word in enumerate(words):
            backward[word[::-1]] = i

        for i, word in enumerate(words):
            
            if word in backward and backward[word] != i:
                res.append([i, backward[word]])
                
            if word != "" and "" in backward and word == word[::-1]:
                res.append([i, backward[""]])
                res.append([backward[""], i])
                
            for j in range(len(word)):
                if word[j:] in backward and word[:j] == word[j-1::-1]:
                    res.append([backward[word[j:]], i])
                if word[:j] in backward and word[j:] == word[:j-1:-1]:
                    res.append([i, backward[word[:j]]])
                    
        return res
        
