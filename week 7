# Partition Equal Subset Sum
class Solution(object):
    def canPartition(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        def subsetSumEqualToK(index, nums, target, dp):
            # preparing base cases for dp
            for i in range(index):            
                dp[i][0] = True
            # dp[0][nums[0]] = True

            for idx in range(1, len(nums)):
                for tgt in range(1, target+1):
                    not_take = dp[idx - 1][tgt]
                    take = False
                    if nums[idx] <= tgt:
                        take = dp[idx-1][tgt-nums[idx]]
                    dp[idx][tgt] = take or not_take
    
            return dp[len(dp)-1][len(dp[0])-1]

        
        total_sum = 0

        for num in nums:
            total_sum += num

        if total_sum&1==1:
            return False

        desired_sum = total_sum/2

        target = desired_sum
        dp=[[False for i in range(target + 1)] for j in range(len(nums))]
        return subsetSumEqualToK(len(nums), nums, desired_sum, dp)

# Coin Change

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [math.inf]*(amount+1)
        dp[0] = 0

        for a in range(1,amount+1):
            for c in coins:
                if c<=a:
                    dp[a] = min(dp[a],1+dp[a-c])

        return dp[-1] if dp[-1]!=math.inf else -1

# Maximum Subarray
class Solution:
    def maxSubArray(self, nums: list[int]) -> int:
        cur = curMax = nums[0]

        for num in nums[1:]:
            cur = max(num, cur + num)
            curMax = max(curMax, cur)
        
        return curMax
